# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uid: int=None, username: str=None, password: str=None, parking: bool=None, spot: int=None):  # noqa: E501
        """User - a model defined in Swagger

        :param uid: The uid of this User.  # noqa: E501
        :type uid: int
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param parking: The parking of this User.  # noqa: E501
        :type parking: bool
        :param spot: The spot of this User.  # noqa: E501
        :type spot: int
        """
        self.swagger_types = {
            'uid': int,
            'username': str,
            'password': str,
            'parking': bool,
            'spot': int
        }

        self.attribute_map = {
            'uid': 'uid',
            'username': 'username',
            'password': 'password',
            'parking': 'parking',
            'spot': 'spot'
        }

        self._uid = uid
        self._username = username
        self._password = password
        self._parking = parking
        self._spot = spot

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uid(self) -> int:
        """Gets the uid of this User.


        :return: The uid of this User.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid: int):
        """Sets the uid of this User.


        :param uid: The uid of this User.
        :type uid: int
        """

        self._uid = uid

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def parking(self) -> bool:
        """Gets the parking of this User.


        :return: The parking of this User.
        :rtype: bool
        """
        return self._parking

    @parking.setter
    def parking(self, parking: bool):
        """Sets the parking of this User.


        :param parking: The parking of this User.
        :type parking: bool
        """

        self._parking = parking

    @property
    def spot(self) -> int:
        """Gets the spot of this User.


        :return: The spot of this User.
        :rtype: int
        """
        return self._spot

    @spot.setter
    def spot(self, spot: int):
        """Sets the spot of this User.


        :param spot: The spot of this User.
        :type spot: int
        """

        self._spot = spot
