# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ParkingSpot(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, location: str=None, status: str=None, uid: int=None):  # noqa: E501
        """ParkingSpot - a model defined in Swagger

        :param id: The id of this ParkingSpot.  # noqa: E501
        :type id: int
        :param name: The name of this ParkingSpot.  # noqa: E501
        :type name: str
        :param location: The location of this ParkingSpot.  # noqa: E501
        :type location: str
        :param status: The status of this ParkingSpot.  # noqa: E501
        :type status: str
        :param uid: The uid of this ParkingSpot.  # noqa: E501
        :type uid: int
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'location': str,
            'status': str,
            'uid': int
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'location': 'location',
            'status': 'status',
            'uid': 'uid'
        }

        self._id = id
        self._name = name
        self._location = location
        self._status = status
        self._uid = uid

    @classmethod
    def from_dict(cls, dikt) -> 'ParkingSpot':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParkingSpot of this ParkingSpot.  # noqa: E501
        :rtype: ParkingSpot
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this ParkingSpot.

        parking spot id unique for each  # noqa: E501

        :return: The id of this ParkingSpot.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this ParkingSpot.

        parking spot id unique for each  # noqa: E501

        :param id: The id of this ParkingSpot.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this ParkingSpot.

        show the name of the parking spot  # noqa: E501

        :return: The name of this ParkingSpot.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ParkingSpot.

        show the name of the parking spot  # noqa: E501

        :param name: The name of this ParkingSpot.
        :type name: str
        """

        self._name = name

    @property
    def location(self) -> str:
        """Gets the location of this ParkingSpot.

        the position of the parking spot  # noqa: E501

        :return: The location of this ParkingSpot.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this ParkingSpot.

        the position of the parking spot  # noqa: E501

        :param location: The location of this ParkingSpot.
        :type location: str
        """

        self._location = location

    @property
    def status(self) -> str:
        """Gets the status of this ParkingSpot.


        :return: The status of this ParkingSpot.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ParkingSpot.


        :param status: The status of this ParkingSpot.
        :type status: str
        """

        self._status = status

    @property
    def uid(self) -> int:
        """Gets the uid of this ParkingSpot.


        :return: The uid of this ParkingSpot.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid: int):
        """Sets the uid of this ParkingSpot.


        :param uid: The uid of this ParkingSpot.
        :type uid: int
        """

        self._uid = uid
